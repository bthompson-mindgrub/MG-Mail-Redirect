<?php

/* redirect any system generated email to your configured email domain
 *    usage:
 *       - in your test site's settings.php set:
 *       $conf = array('mail_redirect_domain' => "mydomain.com");
 *
 *   result:
 *       - input $to:    john_smith@about.com
 *       - output $to:   john_smith@mydomain.com
 *
 *   See README.txt for additional details on test setup
 *
 */


/**
 * Implements hook_help().
().
 */
function mg_mail_redirect_help($path = '', $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Redirects ALL system generated email to a test mail domain. Works with any mail generated
      by drupal_mail() or (with included patch applied) any module that uses mimemail. Used for testing
      mail functions on test sites with real email addresses in the db. Be sure to add:
      $conf = array(\'mg_mail_redirect_domain\' => "mydomain.com"); in your settings.php');
  }
}


/**
 * Implements hook_menu()
().
 */
function mg_mail_redirect_menu() {
  $items = array();

  $items['admin/config/mg_mail_redirect'] = array(
    'title' => 'Mindgrub Mail Redirect',
    'description' => 'Settings for Mindgrub Mail Redirect module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mg_mail_redirect_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

// System Admin Form - callback for menu item listed above
/**
* Page callback for admin settings form
*
* @param mixed $form
* @param mixed $form_state
*/

function mg_mail_redirect_admin_settings($form, &$form_state) {
  // system settings
  $form['mg_mail_redirect_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect Mail Domain'),
    '#default_value' => variable_get('mg_mail_redirect_domain'),
    '#description' => t("Set the redirect mail domain to that of your catch-all mail test server. See README.txt for more info."),
  );
  $form['mg_mail_redirect_excluded'] = array(
    '#type' => 'textarea',
    '#title' => t('Excluded Email Addresses'),
    '#default_value' => variable_get('mg_mail_redirect_excluded'),
    '#description' => t('Set a list of email addresses to exclude from the redirect rules.  Separate email addresses with a comma.  This module uses generic comparisons so entering something like "example" will exclude all email\'s with "example" in them.'),
  );
  $form['mg_mail_redirect_block'] = array(
    '#type' => 'textarea',
    '#title' => t('Blocked Email Addresses'),
    '#default_value' => variable_get('mg_mail_redirect_block'),
    '#description' => t('Set a list of email addresses to block from receiving mail. Separate email addresses with a comma.  This module usees generic comparisons so entering something like "example" will block all emails to addresses with "example" in them.'),
  );

  return system_settings_form($form);
}

/**
* Implement mail_alter hook to replace domain of all email addresses
* redirect any system generated email to your configured email domain
*
*   shows a msg to indicate whenever an email has been redirected.
*
* @param string $message
*/
function mg_mail_redirect_mail_alter(&$message) {

  $mydomain = variable_get('mg_mail_redirect_domain');

  $excludeList = variable_get('mg_mail_redirect_excluded');

  $blockList = variable_get('mg_mail_redirect_block');

  if ($mydomain) {

    /* need to handle RFC2822 formats for $message['to']:
     *    user@example.com
     *    user@example.com, anotheruser@example.com
     *    User <user@example.com>
     *    User <user@example.com>, Another User <anotheruser@example.com>
     */

    if (stristr($message['to'], ",")) { // then we have a list
      $tos = split(",", $message['to']);
      array_walk($tos, '_mg_mail_redirect_trim_array_values');
    }
    else {
      $tos = (array) $message['to'];
    }

    if ($excludeList) {
      $excludeList = explode(',', $excludeList);
      array_walk($excludeList, '_mg_mail_redirect_trim_array_values');
    }

    if ($blockList) {
      $blockList = explode(',', $blockList);
      array_walk($blockList, '_mg_mail_redirect_trim_array_values');
    }

    foreach ($tos as $key => $to) {
      if (is_array($excludeList) && array_search(strtolower($to), $excludeList) !== FALSE) {
        //We found a match for this address in the exclude list.  Don't rewrite it, just pass it on
        drupal_set_message(t('The following TO address: %to has NOT been redirected to the following TEST DOMAIN: %mydomain as it is on the exclude list.',
          array('%to' => $to, '%mydomain' => $mydomain), array('langcode' => 'status')));
        continue;
      }
      if (is_array($blockList) && array_search(strtolower($to), $blockList) !== FALSE) {
        //We found a match for this address in the block list.  Don't rewrite it, just remove it and continue.
        drupal_set_message(t('Mail to the address: %to has been blocked by the Mindgrub Mail Redirect module.',
          array('%to' => $to), array('langcode' => 'status')));
        unset($tos[$key]);
        continue;
      }
      if (stristr($to, "<")) {
        $tos[$key] = preg_replace('^(.*)<((.+)@.+)>^', "$1<$3@$mydomain>", $to);
        drupal_set_message(t("The following TO address or list: %to has been redirected to the following TEST DOMAIN: %mydomain",
          array('%to' => $message['to'], '%mydomain' => $mydomain), array('langcode' => 'status')));
      }
      else {
        $tos[$key] = preg_replace('^((.+)@.+)^', "$2@$mydomain", $to);
        drupal_set_message(t("The following TO address or list: %to has been redirected to the following TEST DOMAIN: %mydomain",
          array('%to' => $message['to'], '%mydomain' => $mydomain), array('langcode' => 'status')));
      }
    }

    $message['to'] = join(",", $tos);
  }
}

/**
 * Implements hook_requirements().
().
 *    - To add to note if mail redirect is defined
 *    - also does check if mimemail has been patched
 */
function mg_mail_redirect_requirements($phase) {
  $requirements = array();
  $mimenote = "";
  if ($phase == 'runtime') {
    if (stristr(variable_get('mg_mail_redirect_domain'), ".")) {
      $mimenote = "";
      $msg = "Site mail is being redirected to <strong>" . variable_get('mg_mail_redirect_domain') . "</strong>";
      $severity = REQUIREMENT_WARNING;
      // check if mimemail module is installed and if it has been patched
      if (module_exists("mimemail")) {
        $mimenote = "Mimemail is being used on your site, ";
        $mimemail_code = file_get_contents(drupal_get_path('module', 'mimemail') . "/mimemail.module");
        if (stristr($mimemail_code, "module_implements('mail_alter')")) {
          $mimenote .= "and it has been patched to work with Mindgrub Mail Redirect";
          $severity = REQUIREMENT_WARNING;
        }
        else {
          $mimenote .= "BUT it has NOT been patched to work with Mindgrub Mail Redirect";
          $severity = REQUIREMENT_ERROR;
        }
      }
    }
    else {
      $msg = "Mindgrub Mail redirect is installed but your mail is not set to be redirected.";
      $severity = REQUIREMENT_WARNING;
    }
    $requirements['mg_mail_redirect_status'] = array(
      'title' => 'Mindgrub Mail Redirect',
      'value' => $msg . "<br>" . $mimenote,
      'severity' => $severity,
    );
  }
  return $requirements;
}

function _mg_mail_redirect_trim_array_values(&$value) {
  $value = trim($value);
}
